{"version":3,"sources":["../../../../src/lib/helper/fitDimensions.js"],"names":["React","Component","isDefined","ReactDOM","getDisplayName","Series","displayName","name","fitDimensions","WrappedComponent","props","minWidth","minHeight","ratio","width","height","getDimensions","el","newWidth","undefined","newHeight","w","parentNode","clientWidth","h","clientHeight","Math","max","ResponsiveComponent","handleWindowResize","bind","getWrappedInstance","saveNode","setTestCanvas","state","node","testCanvas","context","getContext","devicePixelRatio","window","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","addEventListener","dimensions","setState","getRatio","removeEventListener","findDOMNode","ref"],"mappings":"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","file":"fitDimensions.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { isDefined } from \"../utils\";\nimport ReactDOM from \"react-dom\";\n\nfunction getDisplayName(Series) {\n\treturn Series.displayName || Series.name || \"Series\";\n}\n\nexport default function fitDimensions(WrappedComponent, props = {}) {\n\n\tconst {\n\t\tminWidth = 100,\n\t\tminHeight = 100,\n\t\tratio,\n\t\twidth,\n\t\theight,\n\t} = props;\n\n\tfunction getDimensions(el) {\n\t\tlet newWidth = undefined;\n\t\tlet newHeight = undefined;\n\n\t\tif (el) {\n\t\t\tconst w = el.parentNode.clientWidth;\n\t\t\tconst h = el.parentNode.clientHeight;\n\n\t\t\tnewWidth = isDefined(width) ? width : Math.max(w, minWidth);\n\t\t\tnewHeight = isDefined(height) ? height : Math.max(h, minHeight);\n\t\t}\n\n\t\treturn { width: newWidth, height: newHeight };\n\t}\n\n\tclass ResponsiveComponent extends Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.handleWindowResize = this.handleWindowResize.bind(this);\n\t\t\tthis.getWrappedInstance = this.getWrappedInstance.bind(this);\n\t\t\tthis.saveNode = this.saveNode.bind(this);\n\t\t\tthis.setTestCanvas = this.setTestCanvas.bind(this);\n\t\t\tthis.state = {};\n\t\t}\n\n\t\tsaveNode(node) {\n\t\t\tthis.node = node;\n\t\t}\n\n\t\tsetTestCanvas(node) {\n\t\t\tthis.testCanvas = node;\n\t\t}\n\n\t\tgetRatio() {\n\t\t\tif (isDefined(this.testCanvas)) {\n\t\t\t\tconst context = this.testCanvas.getContext(\"2d\");\n\n\t\t\t\tconst devicePixelRatio = window.devicePixelRatio || 1;\n\t\t\t\tconst backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n\n\t\t\t\tconst ratio = devicePixelRatio / backingStoreRatio;\n\t\t\t\t// console.log(\"ratio = \", ratio);\n\t\t\t\treturn ratio;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\n\t\tcomponentDidMount() {\n\t\t\twindow.addEventListener(\"resize\", this.handleWindowResize);\n\t\t\tconst dimensions = getDimensions(this.node);\n\n\t\t\t/* eslint-disable react/no-did-mount-set-state */\n\t\t\tthis.setState({\n\t\t\t\t...dimensions,\n\t\t\t\tratio: isDefined(ratio) ? ratio : this.getRatio(),\n\t\t\t});\n\t\t\t/* eslint-enable react/no-did-mount-set-state */\n\t\t}\n\n\t\tcomponentWillUnmount() {\n\t\t\twindow.removeEventListener(\"resize\", this.handleWindowResize);\n\t\t}\n\n\t\thandleWindowResize() {\n\t\t\tconst node = ReactDOM.findDOMNode(this.node); // eslint-disable-line react/no-find-dom-node\n\n\t\t\tif (node)\n\t\t\t\tthis.setState(getDimensions(node));\n\t\t}\n\n\t\tgetWrappedInstance() {\n\t\t\treturn this.node;\n\t\t}\n\n\t\trender() {\n\t\t\tconst ref = { ref: this.saveNode };\n\n\t\t\tif (this.state.width) {\n\t\t\t\treturn <WrappedComponent\n\t\t\t\t\theight={this.state.height}\n\t\t\t\t\twidth={this.state.width}\n\t\t\t\t\tratio={this.state.ratio}\n\t\t\t\t\t{...this.props}\n\t\t\t\t\t{...ref}\n\t\t\t\t/>;\n\t\t\t} else {\n\t\t\t\treturn <div {...ref}>\n\t\t\t\t\t<canvas ref={this.setTestCanvas}/>\n\t\t\t\t</div>;\n\t\t\t}\n\t\t}\n\t}\n\n\tResponsiveComponent.displayName = `fitDimensions(${getDisplayName(WrappedComponent)})`;\n\n\treturn ResponsiveComponent;\n}\n\n"]}